/*
Например, для обработки событий в броузерах часто используются следующие методы:
stopPropagation()
Используется в обработчиках событий, чтобы запретить дальнейшее всплытие события вверх по дереву DOM.
preventDefault()
Запрещает выполнение действий, предусмотренных по умолчанию
(например, переход по ссылке или отправку формы).
Это два совершенно разных метода, выполняющих разные задачи, и они должны существовать отдельно, но в то же время они часто вызываются друг за другом.
Поэтому, чтобы не повторять вызовы этих двух методов снова и снова, можно создать фасадный метод, который будет вызывать их:
*/

var myevent = {
	// ...
	stop: function (e) {
		e.preventDefault();
		e.stopPropagation();
	}
	// ...
};


/*
В продолжение предыдущего примера можно было бы добавить программный код, учитывающий отличия интерфейса событий в IE:
*/

var myevent = {
	// ...
	stop: function (e) {
		// прочие броузеры
		if (typeof e.preventDefault === "function") {
			e.preventDefault();
		};

		if (typeof e.stopPropagation === "function") {
			e.stopPropagation();
		};

		// IE
		if (typeof e.returnValue === "boolean") {
			e.returnValue = false;
		};

		if (typeof e.cancelBubble === "boolean") {
			e.cancelBubble = true;
		};
	}
	// ...
};