/*
Ожидаемое поведение иллюстрирует следующий фрагмент (здесь предполагается, что вы не являетесь приверженцем теории о множественных 
Вселенных и принимаете идею существования единственной Вселенной (Universe))
*/

/*
Для этого необходимо, чтобы конструктор Universe запоминал ссылку this на объект и затем возвращал ее при последующих вызовах. 
Добиться этого можно несколькими способами
*/

/*
№ 1
Ссылку на экземпляр можно сохранить в статическом свойстве кон-
структора. Функции в JavaScript
являются объектами, поэтому они
могут иметь собственные свойства. Вы можете создать свойство, на-
пример Universe.instance, и сохранить ссылку на объект в нем. Это
простое и понятное решение, но оно имеет один недостаток – свой-
ство instance является общедоступным и может быть изменено
внешним программным кодом, в результате чего есть риск потерять
свой экземпляр.
*/
function Universe() {
	// имеется ли экземпляр, созданный ранее?
	if (typeof Universe.instance === "object") {
		return Universe.instance;
	}

	// создать новый экземпляр
	this.start_time = 0;
	this.bang = "Big";

	// сохранить его
	Universe.instance = this;
	// неявный возврат экземпляра:
	// return this;
}

// проверка
var uni = new Universe();
var uni2 = new Universe();
uni === uni2; // true

/*
№ 2 
Можно сохранить экземпляр в замыкании. Это предотвратит воз-
можность изменения экземпляра из-за пределов конструктора за
счет создания дополнительного замыкания.
*/


function Universe() {
	// сохраненный экземпляр
	var instance;

	// переопределить конструктор
	Universe = function Universe() {
		return instance;
	};

	// перенести свойства прототипа
	Universe.prototype = this;

	// создать экземпляр
	instance = new Universe();

	// переустановить указатель на конструктор
	instance.constructor = Universe;

	// добавить остальную функциональность
	instance.start_time = 0;
	instance.bang = "Big";
	return instance;
}

// проверка
// добавить свойство в прототип и создать экземпляр
Universe.prototype.nothing = true; // true
var uni = new Universe();
Universe.prototype.everything = true; // true
var uni2 = new Universe();

// тот же самый экземпляр
uni === uni2; // true

// все свойства прототипа доступны
// независимо от того, когда они были добавлены
uni.nothing && uni.everything && uni2.nothing && uni2.everything; // true

// обычные свойства объекта также доступны
uni.bang; // "Big"

// ссылка на конструктор содержит правильный указатель
uni.constructor === Universe; // true

// Другой вариант решения проблемы заключается в обертывании конструктора и ссылки на экземпляр немедленно вызываемой функцией.

var Universe;
(function () {
	var instance;

	Universe = function Universe() {
		if (instance) {
			return instance;
		}

		instance = this;

		// добавить остальную функциональность
		this.start_time = 0;
		this.bang = "Big";
	};
}());